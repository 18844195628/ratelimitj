buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3"
    }
}
plugins {
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.6.3'
}


group 'es.moki'
version '1.0-SNAPSHOT'

apply plugin: 'io.codearte.nexus-staging'

task wrapper(type: Wrapper) {
    gradleVersion = '2.14'
}

subprojects {


    apply plugin: 'java'
    apply plugin: 'pmd'
    apply plugin: 'findbugs'
    apply plugin: 'checkstyle'

    apply plugin: 'maven-publish'
    apply plugin: 'maven'
    apply plugin: 'signing'

    checkstyle {
        configFile = rootProject.file('gradle/config/checkstyle/checkstyle.xml')
        toolVersion = '6.19'
    }

    repositories {
        mavenCentral()
    }

    sourceCompatibility = 1.8

    dependencies {
        testCompile(
                'org.assertj:assertj-core:3.4.1',
                'junit:junit:4.12',
                'ch.qos.logback:logback-classic:1.1.7',
                'com.google.guava:guava:19.0',
                'org.mockito:mockito-core:2.0.55-beta',
        )
    }

    if (project.hasProperty('release')) {

        nexusStaging {
            username = ossrhUser
            password = ossrhPassword
        }

        subprojects {

            task javadocJar(type: Jar) {
                classifier = 'javadoc'
                from javadoc
            }

            task sourcesJar(type: Jar) {
                classifier = 'sources'
                from sourceSets.main.allSource
            }

            artifacts {
                archives javadocJar, sourcesJar
            }
        }

        allprojects {
            apply plugin: 'signing'
            apply plugin: 'maven'

            // Signature of artifacts
            signing {
                sign configurations.archives
            }

            // OSSRH publication
            uploadArchives {
                repositories {
                    mavenDeployer {
                        // POM signature
                        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                        // Target repository
                        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                            authentication(userName: ossrhUser, password: ossrhPassword)
                        }
                        pom.project {
                            name 'es.moki.ratelimitj'
                            description 'The RateLimitJ project aims to provide a modular rate limiting solution'
                            packaging 'jar'
                            url 'https://github.com/mokies/ratelimitj'

                            scm {
                                connection 'scm:git:https://github.com/mokies/ratelimitj.git'
                                developerConnection 'scm:git:git@github.com:mokies/ratelimitj.git'
                                url 'https://github.com/mokies/ratelimitj.git'
                            }

                            licenses {
                                license {
                                    name 'Apache License Version 2.0'
                                    url 'http://www.apache.org/licenses/LICENSE-2.0'
                                    distribution 'repo'
                                }
                            }

                            developers {
                                developer {
                                    id = 'mokies'
                                    name = 'Craig Baker'
                                    email = 'craig@moki.es'
                                }
                            }
                        }
                    }
                }
            }
        }
    }

//    jacocoTestReport {
//        reports {
//            xml.enabled = true // coveralls plugin depends on xml format report
//            html.enabled = true
//        }
//    }
//
//    coveralls {
//        sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
//        jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
//    }
//
//    tasks.coveralls {
//        group = 'Coverage reports'
//        description = 'Uploads the aggregated coverage report to Coveralls'
//
//        dependsOn jacocoRootReport
//        onlyIf { System.env.'CI' }
//    }


}



